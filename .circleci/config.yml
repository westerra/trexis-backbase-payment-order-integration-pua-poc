version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@1.0
  maven: circleci/maven@1.1
  aws-ecr: circleci/aws-ecr@7.0.0

jobs:
  veracode_scan:
    docker:
      - image: circleci/openjdk:11.0.2-jdk
    parameters:
      VERACODE_APP_NAME:
        description: |
          Pass VERACODE_APP_NAME in the builds
        type: string

      app_folder:
        type: string

      token:
        description: |
          Pass Github token
        type: env_var_name

    steps:
      - attach_workspace:
          at: .
      - checkout
      - gh/setup
      - aws-cli/install

      - run:
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
          name: Generate Cache Checksum
          working_directory: $CIRCLE_WORKING_DIRECTORY

      - restore_cache:
          key: 'maven-{{ checksum "/tmp/maven_cache_seed" }}'

      - run:
          command: |
            mkdir -p ~/.m2
            echo $SETTINGS_SECURITY_XML | base64 -d > ~/.m2/settings-security.xml
            echo $SETTINGS_XML | base64 -d > ~/.m2/settings.xml
            cat ~/.m2/settings.xml
            cat ~/.m2/settings-security.xml
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            echo 'export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain westerra --domain-owner 181741612687 --query authorizationToken --output text)' >> $BASH_ENV

      - run:
          name: mvn clean install
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain westerra --domain-owner 181741612687 --query authorizationToken --output text)
            mvn -s ~/.m2/settings.xml -f <<parameters.app_folder>>/pom.xml clean install
            
      - save_cache:
          key: 'maven-{{ checksum "/tmp/maven_cache_seed" }}'
          paths:
            - ~/.m2 

      - run:
          name: Veracode Scan Status
          command: |
            curl -sSL  https://download.sourceclear.com/ci.sh | SCAN_DIR="./<<parameters.app_folder>>/" sh > stats.txt
          no_output_timeout: 120m

      - run:
          name: Post Stats to GitHub PR
          command: |
            gh issue status --json url --jq '.[][].url' | head -n 1 > issue.txt || echo "No Github issues..!"
            gh issue edit $(cat issue.txt) -t "Veracode report" --add-label "veracode" --add-assignee "Marcus-treXis,vishnudxb" --body "$(cat stats.txt)" || gh issue create -t "Veracode report" --assignee Marcus-treXis,vishnudxb -l "veracode" --body "$(cat stats.txt)"

  create-pr-from-develop-to-main:
    docker:
      - image: 'cimg/base:stable'
    parameters:
      token:
        description: |
          Pass Github token
        type: env_var_name
    steps:
      - gh/setup
      - gh/clone
      - run:
          command: |
            PR_STATUS=$(gh pr view --json state | jq -r .state)
            if [[ "$PR_STATUS" = "OPEN" ]]; then echo "PR already open" ; else gh pr create --title "PR develop -> main" --body "PR from develop branch to main branch" --reviewer HendrikTredoux --base main; fi
          name: Create Pull Request

  build-and-publish:
    parameters:
      path:
        description: |
          Specify Dockerfile path
        type: string

      repo:
        description: Name of an Amazon ECR repository
        type: string

      tag:
        description: A comma-separated string containing docker image tags to build and push (default = latest)
        type: string

      dockerfile:
        type: string

      extra-build-args:
        type: string

      app_folder:
        type: string

    docker:
      - image: 'cimg/openjdk:11.0'
    steps:
      - attach_workspace:
          at: .
      - checkout
      - aws-cli/install

      - run:
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
          name: Generate Cache Checksum
          working_directory: $CIRCLE_WORKING_DIRECTORY

      - restore_cache:
          key: 'maven-{{ checksum "/tmp/maven_cache_seed" }}'

      - run:
          command: |
            mkdir -p ~/.m2
            echo $SETTINGS_SECURITY_XML | base64 -d > ~/.m2/settings-security.xml
            echo $SETTINGS_XML | base64 -d > ~/.m2/settings.xml
            cat ~/.m2/settings.xml
            cat ~/.m2/settings-security.xml
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            echo 'export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain westerra --domain-owner 181741612687 --query authorizationToken --output text)' >> $BASH_ENV

      - run:
          name: mvn clean install
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain westerra --domain-owner 181741612687 --query authorizationToken --output text)
            mvn -s ~/.m2/settings.xml -f <<parameters.app_folder>>/pom.xml clean install
            
      - save_cache:
          key: 'maven-{{ checksum "/tmp/maven_cache_seed" }}'
          paths:
            - ~/.m2

      - persist_to_workspace:
          root: .
          paths:
            - .

      - run:
          name: Update Dockerfile
          command: |
            mkdir -p docker docker/json docker/themes docker/providers
            cp -rvf ./Dockerfile docker/
            cp -rvf ./target/<<parameters.app_folder>>.jar docker/
          working_directory: ./<<parameters.app_folder>>

      - run:
          name: list files inside docker
          command: ls -la docker/*
          working_directory: ./<<parameters.app_folder>>
            
      - aws-ecr/build-and-push-image:
          account-url: AWS_ACCOUNT_URL
          attach-workspace: true
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: <<parameters.dockerfile>>
          path: <<parameters.path>>
          region: AWS_DEFAULT_REGION
          repo: <<parameters.repo>>
          tag: <<parameters.tag>>
          extra-build-args: <<parameters.extra-build-args>>
          skip-when-tags-exist: false
          workspace-root: .
          setup-remote-docker: true
          remote-docker-layer-caching: true

  deploy:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: large
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      namespace:
        description: |
          Name of the cluster namespace
        type: string
      env:
        description: |
          Select the environment (dev/sit/uat/prod)
        type: string
      app_folder:
        type: string
      secrets:
        type: string
    steps:
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: v1.22.0
      - aws-cli/install
      - run:
          command: |
            wget https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz
            tar -xvf helm-v3.8.1-linux-amd64.tar.gz
            sudo mv linux-amd64/helm /usr/local/bin
            helm version 
          name: Setup helm
      - run:
          name: Install OpenVPN
          no_output_timeout: 30m
          command: |
            sudo apt update && sudo apt install -y apt-transport-https
            sudo wget https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
            sudo apt-key add openvpn-repo-pkg-key.pub
            sudo wget -O /etc/apt/sources.list.d/openvpn3.list https://swupdate.openvpn.net/community/openvpn3/repos/openvpn3-$(sed 's/UBUNTU_CODENAME=//;t;d' /etc/os-release).list
            sudo apt update && sudo apt install -y openvpn3 openvpn-systemd-resolved 
      - run:
          name: Check IP before VPN connection
          command: |
            ip a
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"
      - run:
          name: VPN Setup
          background: true
          command: |
            mkdir -m700 -p $HOME/.openvpn3/autoload
            echo $CIRCLECI_VPN_CONFIG_FILE | base64 -d > $HOME/.openvpn3/autoload/client.ovpn
            echo $CIRCLECI_VPN_AUTOLOAD | base64 -d > $HOME/.openvpn3/autoload/client.autoload
            ET_phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }')
            echo ET_phone_home: $ET_phone_home
            
            if [ -n "$ET_phone_home" ]; then
              echo "route $ET_phone_home 255.255.255.255 net_gateway" >> $HOME/.openvpn3/autoload/client.ovpn
            fi
            
            echo "route 169.254.0.0 255.255.0.0 net_gateway" >> $HOME/.openvpn3/autoload/client.ovpn
            
            for SYS_RES_DNS in $(systemd-resolve --status | grep 'DNS Servers'|awk '{print $3}')
              do
                echo "route $SYS_RES_DNS 255.255.0.0 net_gateway" >> $HOME/.openvpn3/autoload/client.ovpn
                echo SYS_RES_DNS: $SYS_RES_DNS
            done
            for IP in $(host runner.circleci.com | awk '{ print $4; }')
              do 
                echo "route $IP 255.255.255.255 net_gateway" >> $HOME/.openvpn3/autoload/client.ovpn
                echo IP Addr: $IP
            done
            sudo openvpn3-autoload --directory $HOME/.openvpn3/autoload
            sudo openvpn3 sessions-list
      - run:
          name: Wait for the connection to be established and check
          command: |
            counter=1
            until sudo openvpn3 sessions-list|grep "Client connected" || [ "$counter" -ge 5 ]; do
              ((counter++))
              echo "Attempting to connect to VPN server..."
              sleep 1;
            done
            
            if ( ! sudo openvpn3 sessions-list|grep "Client connected"); then
              printf "\nUnable to establish connection within the allocated time ---> Giving up.\n"
            else
              printf "\nVPN connected\n"
              printf "\nPublic IP is now %s\n" "$(curl -s https://checkip.amazonaws.com)"
            fi
      - run:
          name: Check VPN IP Address
          command: |
            printf "\nPublic IP is now %s\n" "$(curl -s https://checkip.amazonaws.com)"
      - run:
          name: If not able to connect to VPN, update AWS k8s master api access using aws cli
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
            aws sts get-caller-identity
            export EXPECTED_IP=18.190.47.94
            export CURRENT_IP=$(curl -s https://checkip.amazonaws.com)
            counter=1
            until aws eks describe-cluster --region $AWS_DEFAULT_REGION --name << parameters.cluster-name >> | jq -r '.cluster.status' || [ "$counter" -ge 5 ]; do
              ((counter++))
              echo "Checking for any cluster updates running..."
              sleep 10;
            done
            
            if ( ! aws eks describe-cluster --region $AWS_DEFAULT_REGION --name << parameters.cluster-name >> | jq -r '.cluster.status'); then
              echo "No cluster update going on, proceeding with ip updates..."
            else
              printf "\nProceed with VPN connection setup...\n"
            fi
            if [ "$CURRENT_IP" != "$EXPECTED_IP" ];
            then
              aws eks update-cluster-config --region $AWS_DEFAULT_REGION --name << parameters.cluster-name >> --resources-vpc-config endpointPublicAccess=true,endpointPrivateAccess=true,publicAccessCidrs=$CURRENT_IP/32,34.237.0.220/32,18.190.47.94/32
              sleep 10
            else
              echo "Nothing to update in AWS k8s master api..."
            fi          
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
            aws sts get-caller-identity
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name << parameters.cluster-name >>
            kubectl get pods --namespace << parameters.namespace >>
            kubectl get svc --namespace << parameters.namespace >>
          name: Display WCU << parameters.app_folder >> pods in DEV Cluster
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            aws sts get-caller-identity
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name << parameters.cluster-name >>            
            <<parameters.secrets>> values.yaml-tmpl > values.yaml
            helm upgrade -f values.yaml << parameters.app_folder >> -n << parameters.namespace >> . || helm install -f values.yaml << parameters.app_folder >> -n << parameters.namespace >> .
            kubectl rollout status deployment/dbs-<< parameters.app_folder >> -n << parameters.namespace >>
          name: Deploy WCU << parameters.app_folder >> Server in DEV Cluster
          working_directory: ./<< parameters.app_folder >>/helm

workflows:
  deployment:
    jobs:
      - build-and-publish:
          name: build-and-publish-for-payment-order-integration-service-for-develop-branch
          context: 
            - bb-aws-dev
            - bb-aws-dev-2
          app_folder: payment-order-integration-service
          path: ./payment-order-integration-service/docker
          repo: dbs-payment-order-integration-service
          dockerfile: Dockerfile
          extra-build-args: '--build-arg JAR_FILE=payment-order-integration-service.jar'
          tag: dev-${CIRCLE_SHA1:0:7},sit-${CIRCLE_SHA1:0:7}
          filters:
            branches:
              only:
                - develop

      - build-and-publish:
          name: build-and-publish-for-payment-order-integration-service-for-main-branch
          context: 
            - bb-aws-uat
            - bb-aws-uat-2
          app_folder: payment-order-integration-service
          path: ./payment-order-integration-service/docker
          repo: dbs-payment-order-integration-service
          dockerfile: Dockerfile
          extra-build-args: '--build-arg JAR_FILE=payment-order-integration-service.jar'
          tag: uat-${CIRCLE_SHA1:0:7},prod-${CIRCLE_SHA1:0:7}
          filters:
            branches:
              only:
                - main

      - deploy:
          name: deploy-payment-order-integration-service-dev
          context: 
            - bb-aws-dev
            - bb-aws-dev-2
          requires:
            - build-and-publish-for-payment-order-integration-service-for-develop-branch
            - Veracode-Scanning
          app_folder: payment-order-integration-service
          cluster-name: westerra-dev-eks
          namespace: westerra-dev
          secrets: sed -e 's@$TAG@'"$ENV-${CIRCLE_SHA1:0:7}"'@' -e 's@$NAMESPACE@'"$NAMESPACE"'@'  -e 's@$AMQU@'"$AMQU"'@' -e 's@$AMQP@'"$AMQP"'@'  -e 's@$JAVA_TOOL_OPTIONS@'"$JAVA_TOOL_OPTIONS"'@'  -e 's@$SIG_SECRET_KEY@'"$SIG_SECRET_KEY"'@'  -e 's@$LOADER_PATH@'"$LOADER_PATH"'@'  -e 's@$AWS_DEFAULT_REGION@'"$AWS_DEFAULT_REGION"'@'  -e 's@$EXTERNAL_SIG_SECRET_KEY@'"$EXTERNAL_SIG_SECRET_KEY"'@'  -e 's@$EXTERNAL_ENC_SECRET_KEY@'"$EXTERNAL_ENC_SECRET_KEY"'@'  -e 's@$USERCTX_KEY@'"$USERCTX_KEY"'@' -e 's@$RDSURL@'"$RDSURL"'@' -e 's@$DBU@'"$DBU"'@' -e 's@$DBP@'"$DBP"'@' -e 's@$IDENTITY_USERNAME@'"$IDENTITY_USERNAME"'@' -e 's@$IDENTITY_PASSWORD@'"$IDENTITY_PASSWORD"'@' -e 's@$MULESOFT_API_KEYS@'"$MULESOFT_API_KEYS"'@' -e 's@$BB_CLIENT_SECRET_ID@'"$BB_CLIENT_SECRET_ID"'@' -e 's@$HPA_ENABLED@'"$HPA_ENABLED"'@'
          env: dev
          filters:
            branches:
              only:
                - develop

   
      - request-to-deploy-in-sit:
          requires:
            - deploy-payment-order-integration-service-dev
          type: approval
          filters:
            branches:
              only:
                - develop

      - deploy:
          name: deploy-payment-order-integration-service-sit
          context: 
            - bb-aws-sit
            - bb-aws-sit-2
          requires:
            - request-to-deploy-in-sit
          app_folder: payment-order-integration-service
          cluster-name: westerra-dev-eks
          namespace: westerra-sit
          secrets: sed -e 's@$TAG@'"$ENV-${CIRCLE_SHA1:0:7}"'@' -e 's@$NAMESPACE@'"$NAMESPACE"'@'  -e 's@$AMQU@'"$AMQU"'@' -e 's@$AMQP@'"$AMQP"'@'  -e 's@$JAVA_TOOL_OPTIONS@'"$JAVA_TOOL_OPTIONS"'@'  -e 's@$SIG_SECRET_KEY@'"$SIG_SECRET_KEY"'@'  -e 's@$LOADER_PATH@'"$LOADER_PATH"'@'  -e 's@$AWS_DEFAULT_REGION@'"$AWS_DEFAULT_REGION"'@'  -e 's@$EXTERNAL_SIG_SECRET_KEY@'"$EXTERNAL_SIG_SECRET_KEY"'@'  -e 's@$EXTERNAL_ENC_SECRET_KEY@'"$EXTERNAL_ENC_SECRET_KEY"'@'  -e 's@$USERCTX_KEY@'"$USERCTX_KEY"'@' -e 's@$RDSURL@'"$RDSURL"'@' -e 's@$DBU@'"$DBU"'@' -e 's@$DBP@'"$DBP"'@' -e 's@$IDENTITY_USERNAME@'"$IDENTITY_USERNAME"'@' -e 's@$IDENTITY_PASSWORD@'"$IDENTITY_PASSWORD"'@' -e 's@$MULESOFT_API_KEYS@'"$MULESOFT_API_KEYS"'@' -e 's@$BB_CLIENT_SECRET_ID@'"$BB_CLIENT_SECRET_ID"'@' -e 's@$HPA_ENABLED@'"$HPA_ENABLED"'@'
          env: sit
          filters:
            branches:
              only:
                - develop

      - request-to-deploy-in-uat:
          requires:
            - build-and-publish-for-payment-order-integration-service-for-main-branch
          type: approval
          filters:
            branches:
              only:
                - main

      - deploy:
          name: deploy-payment-order-integration-service-uat
          context: 
            - bb-aws-uat
            - bb-aws-uat-2
          requires:
            - request-to-deploy-in-uat
          app_folder: payment-order-integration-service
          cluster-name: westerra-uat-eks
          namespace: westerra-uat
          secrets: sed -e 's@$TAG@'"$ENV-${CIRCLE_SHA1:0:7}"'@' -e 's@$NAMESPACE@'"$NAMESPACE"'@'  -e 's@$AMQU@'"$AMQU"'@' -e 's@$AMQP@'"$AMQP"'@'  -e 's@$JAVA_TOOL_OPTIONS@'"$JAVA_TOOL_OPTIONS"'@'  -e 's@$SIG_SECRET_KEY@'"$SIG_SECRET_KEY"'@'  -e 's@$LOADER_PATH@'"$LOADER_PATH"'@'  -e 's@$AWS_DEFAULT_REGION@'"$AWS_DEFAULT_REGION"'@'  -e 's@$EXTERNAL_SIG_SECRET_KEY@'"$EXTERNAL_SIG_SECRET_KEY"'@'  -e 's@$EXTERNAL_ENC_SECRET_KEY@'"$EXTERNAL_ENC_SECRET_KEY"'@'  -e 's@$USERCTX_KEY@'"$USERCTX_KEY"'@' -e 's@$RDSURL@'"$RDSURL"'@' -e 's@$DBU@'"$DBU"'@' -e 's@$DBP@'"$DBP"'@' -e 's@$IDENTITY_USERNAME@'"$IDENTITY_USERNAME"'@' -e 's@$IDENTITY_PASSWORD@'"$IDENTITY_PASSWORD"'@' -e 's@$MULESOFT_API_KEYS@'"$MULESOFT_API_KEYS"'@' -e 's@$BB_CLIENT_SECRET_ID@'"$BB_CLIENT_SECRET_ID"'@' -e 's@$HPA_ENABLED@'"$HPA_ENABLED"'@'
          env: uat
          filters:
            branches:
              only:
                - main

      - request-to-deploy-in-prod:
          requires:
            - deploy-payment-order-integration-service-uat
          type: approval
          filters:
            branches:
              only:
                - main

      - deploy:
          name: deploy-payment-order-integration-service-prod
          context: 
            - bb-aws-prod
            - bb-aws-prod-2
          requires:
            - request-to-deploy-in-prod
          app_folder: payment-order-integration-service
          cluster-name: westerra-prod-eks
          namespace: westerra-prod
          secrets: sed -e 's@$TAG@'"$ENV-${CIRCLE_SHA1:0:7}"'@' -e 's@$NAMESPACE@'"$NAMESPACE"'@'  -e 's@$AMQU@'"$AMQU"'@' -e 's@$AMQP@'"$AMQP"'@'  -e 's@$JAVA_TOOL_OPTIONS@'"$JAVA_TOOL_OPTIONS"'@'  -e 's@$SIG_SECRET_KEY@'"$SIG_SECRET_KEY"'@'  -e 's@$LOADER_PATH@'"$LOADER_PATH"'@'  -e 's@$AWS_DEFAULT_REGION@'"$AWS_DEFAULT_REGION"'@'  -e 's@$EXTERNAL_SIG_SECRET_KEY@'"$EXTERNAL_SIG_SECRET_KEY"'@'  -e 's@$EXTERNAL_ENC_SECRET_KEY@'"$EXTERNAL_ENC_SECRET_KEY"'@'  -e 's@$USERCTX_KEY@'"$USERCTX_KEY"'@' -e 's@$RDSURL@'"$RDSURL"'@' -e 's@$DBU@'"$DBU"'@' -e 's@$DBP@'"$DBP"'@' -e 's@$IDENTITY_USERNAME@'"$IDENTITY_USERNAME"'@' -e 's@$IDENTITY_PASSWORD@'"$IDENTITY_PASSWORD"'@' -e 's@$MULESOFT_API_KEYS@'"$MULESOFT_API_KEYS"'@' -e 's@$BB_CLIENT_SECRET_ID@'"$BB_CLIENT_SECRET_ID"'@' -e 's@$HPA_ENABLED@'"$HPA_ENABLED"'@'
          env: prod
          filters:
            branches:
              only:
                - main

      - approval-for-creating-pr-from-develop-to-main:
          requires:
            - deploy-payment-order-integration-service-sit
          type: approval      
          filters:
            branches:
              only:
                - develop

      - create-pr-from-develop-to-main:
          requires:
            - approval-for-creating-pr-from-develop-to-main
          token: GITHUB_TOKEN       
          filters:
            branches:
              only:
                - develop

      - veracode_scan:
          name: Veracode-Scanning
          VERACODE_APP_NAME: trexis-backbase-payment-order-integration
          app_folder: payment-order-integration-service
          token: GITHUB_TOKEN
          context: 
            - veracode
            - bb-aws-dev
          filters:
            branches:
              only:
                - develop
